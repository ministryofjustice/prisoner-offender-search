---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-snapshot-script
  labels:
    {{- include "app.labels" . | nindent 4 }}
data:
  entrypoint.sh: |-
    #!/bin/bash
    set -e
    HTTPIE_SESSION="~/.httpie_session.json"
    HTTPIE_OPTS=("--stream" "--check-status" "--ignore-stdin" "--timeout=600" "--session-read-only=${HTTPIE_SESSION}")
    API_ENDPOINT="${ELASTICSEARCH_PROXY_URL}"
    
    # Setup httpie session
    if ! OUTPUT=$(http --check-status --ignore-stdin --session=${HTTPIE_SESSION} "${API_ENDPOINT}"); then
      echo -e "\nUnable to talk to elastic search API"
      echo "$OUTPUT"
      exit 1
    fi
    
    http_es() {
      http "${HTTPIE_OPTS[@]}" "$@"
    }
    
    # Register snapshot repo if not already
    if ! http_es GET $API_ENDPOINT/_snapshot/$NAMESPACE &>/dev/null; then
      # If the snapshot repo with same name as namespace does not exist, create it. 
      settings="{
        \"bucket\": \"${BUCKET_NAME}\",
        \"region\": \"eu-west-2\",
        \"role_arn\": \"${SNAPSHOT_ROLE_ARN}\",
        \"base_path\": \"${NAMESPACE}\"
      }"
      http_es --print=Hbh POST $API_ENDPOINT/_snapshot/$NAMESPACE \
        type="s3" \
        settings:="${settings}"
    fi;
    
    # Delete latest snapshot if exists 
    echo -e "\nDeleting existing snapshot"
    #Â this can take a long time to return, try until it deletes
    while http_es GET $API_ENDPOINT/_snapshot/$NAMESPACE/latest &>/dev/null; do
      http_es --print=Hbh DELETE $API_ENDPOINT/_snapshot/$NAMESPACE/latest
      sleep 2
    done
    
    # Take snapshot
    echo -e "\nCreating snapshot"
    http_es --print=Hbh PUT $API_ENDPOINT/_snapshot/$NAMESPACE/latest
   
    echo -e "\nWaiting for snapshot to finish" 
    while ! http_es GET $API_ENDPOINT/_snapshot/$NAMESPACE/latest 2>/dev/null | jq -e '.snapshots[] | select(.state == "SUCCESS")' &>/dev/null; do
      echo -n "."
      sleep 20
    done
    echo -e "\nSnapshot successful"
    http_es --print=b GET $API_ENDPOINT/_snapshot/$NAMESPACE/latest

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ include "app.fullname" . }}-elasticsearch-snapshot
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  schedule: "30 2 * * *"
  concurrencyPolicy: "Forbid"
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 2400
      template:
        spec:
          containers:
          - name: elasticsearch-snapshot
            image: "ghcr.io/ministryofjustice/hmpps-devops-tools:latest"
            command:
            - /bin/entrypoint.sh
            volumeMounts:
            - name: elasticsearch-snapshot-script 
              mountPath: /bin/entrypoint.sh
              readOnly: true
              subPath: entrypoint.sh
            env:
            - name: ELASTICSEARCH_PROXY_URL
              valueFrom:
                secretKeyRef:
                  name: elasticsearch
                  key: aws_es_proxy_url
            - name: SNAPSHOT_ROLE_ARN
              valueFrom:
                secretKeyRef:
                  name: es-snapshot-role
                  key: snapshot_role_arn
            - name: BUCKET_NAME
              valueFrom: 
                secretKeyRef:
                  name: es-snapshot-bucket
                  key: bucket_name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          restartPolicy: "Never"
          volumes:
          - name: elasticsearch-snapshot-script
            configMap:
              name: elasticsearch-snapshot-script
              defaultMode: 0755
